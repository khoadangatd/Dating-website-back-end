#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('serveryoutube:server');
var http = require('http');
const jwt = require('jsonwebtoken');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server,{
    cors: {
      origin: "http://localhost:3000",
      methods: ["GET", "POST"],
    }
  });

io.use((socket,next)=>{
    try {
        const token = socket.handshake.query.token;
        jwt.verify(token, process.env.REFRESH_TOKEN_SECRET, (err, user) => {
            
            socket.user = user;
            next();
        })
    }
    catch (error) {
        console.log(err);
    }
})

const online=[];

io.on('connection', socket => {
    console.log("connect: "+socket.user._id);
    online.push(socket.user._id);
    socket.broadcast.emit('online',online);
    socket.on('disconnect',()=>{
        console.log("Disconnected"+ socket.user._id);
        var index = online.indexOf(socket.user._id);
        online.splice(index,1);
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
