#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('serveryoutube:server');
var http = require('http');
const jwt = require('jsonwebtoken');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server, {
    cors: {
        origin: "http://localhost:3000",
        methods: ["GET", "POST"],
    }
});

io.use((socket, next) => {
    try {
        const token = socket.handshake.query.token;
        jwt.verify(token, process.env.REFRESH_TOKEN_SECRET, (err, user) => {
            socket.user = user;
            next();
        })
    }
    catch (error) {
        console.log(err);
    }
})

const AppSocket=require("../app/sockets/appsocket");

const online = [];

io.on('connection', socket => {
    console.log("connect: " + socket.user._id);
    console.log(socket.user);
    online.push({
        _id: socket.user._id,
        idsocket: socket.id
    });
    console.log({
        mess: "người đang onl",
        online: online
    });
    io.emit('online', online);
    socket.on('disconnect', () => {
        console.log("Disconnected" + socket.user._id);
        var index = online.findIndex((user) => user._id === socket.user._id);
        online.splice(index, 1);
        io.emit('online', online);
    });
    socket.on('like', (data) => {
        console.log("đang trong trường like")
        console.log(online);
        // Thực hiện thay đổi csdl trong trường like khi interact
        console.log("socket hien tai cua nguoi dung" + socket.id);
        AppSocket.likeUser(socket.user._id, data._idother)
        AppSocket.handleMatchUser(socket.user._id, data._idother, data.liked)
            .then(match => {
                let other = online.find((user) => {
                    return user._id == data._idother;
                })
                if(!other){
                    return;
                }
                if (match) {
                    io.to(`${other.idsocket}`).emit('matched', {
                        message:`Bạn đã kết đôi với ${data.name}`,
                        id:socket.user._id
                    });
                    socket.emit('matched', {
                        message:"Bạn đã kết đôi",
                        id:data._idother
                    });
                }
                else {
                    io.to(`${other.idsocket}`).emit('liked', {
                        message:"Có người đã thích bạn",
                        id:socket.user._id
                    });
                }
            })
    })
    socket.on('unlike', (_idother) => {
    });
    socket.on('sendMessage', (message, _idmatcher) => {
        let other = online.find((user) => {
            return user._id == _idmatcher;
        })
        AppSocket.sendMessage(message, socket.user._id)
        if(!other){
            return;
        }
        io.to(`${other.idsocket}`).emit('getMessage', {
            ...message,
            sender: socket.user._id
        })
    })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
